// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AppAccessArgs, AppAccessState } from "./appAccess";
export type AppAccess = import("./appAccess").AppAccess;
export const AppAccess: typeof import("./appAccess").AppAccess = null as any;
utilities.lazyLoad(exports, ["AppAccess"], () => require("./appAccess"));

export { GetPeeringInfoArgs, GetPeeringInfoResult, GetPeeringInfoOutputArgs } from "./getPeeringInfo";
export const getPeeringInfo: typeof import("./getPeeringInfo").getPeeringInfo = null as any;
export const getPeeringInfoOutput: typeof import("./getPeeringInfo").getPeeringInfoOutput = null as any;
utilities.lazyLoad(exports, ["getPeeringInfo","getPeeringInfoOutput"], () => require("./getPeeringInfo"));

export { GetSpaceArgs, GetSpaceResult, GetSpaceOutputArgs } from "./getSpace";
export const getSpace: typeof import("./getSpace").getSpace = null as any;
export const getSpaceOutput: typeof import("./getSpace").getSpaceOutput = null as any;
utilities.lazyLoad(exports, ["getSpace","getSpaceOutput"], () => require("./getSpace"));

export { InboundRulesetArgs, InboundRulesetState } from "./inboundRuleset";
export type InboundRuleset = import("./inboundRuleset").InboundRuleset;
export const InboundRuleset: typeof import("./inboundRuleset").InboundRuleset = null as any;
utilities.lazyLoad(exports, ["InboundRuleset"], () => require("./inboundRuleset"));

export { PeeringConnectionAccepterArgs, PeeringConnectionAccepterState } from "./peeringConnectionAccepter";
export type PeeringConnectionAccepter = import("./peeringConnectionAccepter").PeeringConnectionAccepter;
export const PeeringConnectionAccepter: typeof import("./peeringConnectionAccepter").PeeringConnectionAccepter = null as any;
utilities.lazyLoad(exports, ["PeeringConnectionAccepter"], () => require("./peeringConnectionAccepter"));

export { SpaceArgs, SpaceState } from "./space";
export type Space = import("./space").Space;
export const Space: typeof import("./space").Space = null as any;
utilities.lazyLoad(exports, ["Space"], () => require("./space"));

export { VpnConnectionArgs, VpnConnectionState } from "./vpnConnection";
export type VpnConnection = import("./vpnConnection").VpnConnection;
export const VpnConnection: typeof import("./vpnConnection").VpnConnection = null as any;
utilities.lazyLoad(exports, ["VpnConnection"], () => require("./vpnConnection"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "heroku:space/appAccess:AppAccess":
                return new AppAccess(name, <any>undefined, { urn })
            case "heroku:space/inboundRuleset:InboundRuleset":
                return new InboundRuleset(name, <any>undefined, { urn })
            case "heroku:space/peeringConnectionAccepter:PeeringConnectionAccepter":
                return new PeeringConnectionAccepter(name, <any>undefined, { urn })
            case "heroku:space/space:Space":
                return new Space(name, <any>undefined, { urn })
            case "heroku:space/vpnConnection:VpnConnection":
                return new VpnConnection(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("heroku", "space/appAccess", _module)
pulumi.runtime.registerResourceModule("heroku", "space/inboundRuleset", _module)
pulumi.runtime.registerResourceModule("heroku", "space/peeringConnectionAccepter", _module)
pulumi.runtime.registerResourceModule("heroku", "space/space", _module)
pulumi.runtime.registerResourceModule("heroku", "space/vpnConnection", _module)
